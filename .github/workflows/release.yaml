name: Release

on: push

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-20.04
    outputs:
      kernel_versions: ${{ steps.kernel_versions.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read Kernel Version
        id: kernel_versions
        run: |
          echo "value=$(cat KERNEL_VERSIONS | jq -ncR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT
  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: prepare
    strategy:
      matrix:
        arch: ["x86_64", "arm64"]
        version: ${{ fromJson(needs.prepare.outputs.kernel_versions) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: "Build Kernel Version ${{ matrix.version }} (Arch: ${{ matrix.arch }})"
        uses: docker/build-push-action@v4
        with:
          push: false
          tags: linux-headers:${{ matrix.version }}-${{ matrix.arch }}
          context: .
          build-args:
            - KERNEL_VERSION=${{ matrix.version }}
            - ARCH=${{ matrix.arch }}
            - CROSS_COMPILE=${{ matrix.arch == 'arm64' ? 'aarch64-linux-gnu-' : '' }}
      - name: Retrieve Output
        run: docker run --rm -v $PWD/.builds:/output linux-headers:{{ matric.version }}-${{ matrix.arch }}
      - name: Test
        run: ls -lah $PWD/.builds
