name: Release

on: push

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-20.04
    outputs:
      kernel_versions: ${{ steps.kernel_versions.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read Kernel Version
        id: kernel_versions
        run: |
          echo "value=$(cat KERNEL_VERSIONS | jq -ncR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT
  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: prepare
    strategy:
      matrix:
        arch: ["x86_64", "arm64"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: "Build Kernel Version ${{ matrix.version }} (Arch: ${{ matrix.arch }})"
        shell: bash
        run: |
          KERNEL_VERSIONS=($(cat KERNEL_VERSIONS))
          for version in "${KERNEL_VERSIONS[@]}"; do
            docker buildx build --build-arg KERNEL_VERSION=${version} \
              --build-arg ARCH="${{ matrix.arch }}" \
              --build-arg CROSS_COMPILE="${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-' || '' }}" \
              -t "linux-headers:${version}-${{ matrix.arch }}" \
              --cache-to type=gha \
              --cache-from type=gha . &
              pids[${i}]=$!
          done

          for pid in ${pids[*]}; do
            wait $pid
          done

          for $version in "${KERNEL_VERSIONS[@]}"; do
            docker run --rm -v $PWD/.builds:/output linux-headeres:${version}-${{ matrix.arch }}
          done

          ls -lah $PWD/.builds
