name: Release

on: push

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-20.04
    outputs:
      kernel_versions: ${{ steps.kernel_versions.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read Kernel Version
        id: kernel_versions
        run: |
          echo "value=$(cat KERNEL_VERSIONS | jq -ncR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: prepare
    strategy:
      matrix:
        version: ${{ fromJson(needs.prepare.outputs.kernel_versions ) }}
        arch: ["x86_64", "arm64"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: "Build Kernel Version ${{ matrix.version }} Target Arch: ${{ matrix.arch }}"
        shell: bash
        run: |
          docker build --build-arg KERNEL_VERSION=${{ matrix.version }} \
            --build-arg ARCH="${{ matrix.arch }}" \
            --build-arg CROSS_COMPILE="${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-' || '' }}" \
            -t linux-headers:${{ matrix.version }}-${{ matrix.arch }} .
          docker run --rm -v ${{ github.workspace }}/builds:/output linux-headers:${{ matrix.version }}-${{ matrix.arch }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/builds/linux-headers-${{ matrix.arch }}-${{ matrix.version }}.tar.gz

  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/builds
      - name: Test
        run: ls -lah ${{ github.workspace }}/builds
